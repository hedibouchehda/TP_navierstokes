// Parameters
verbosity = 0;
int nn = 1;
real nu = 0.001;
real dt = 0.2;
real epsv = 1e-6;
real epsu = 1e-6;
real epsp = 1e-6;

// Mesh
border Gamma1(t=0, 1){x=t; y=0;}
border Gamma2(t=0, 1){x=1; y=t;}
border Gamma3(t=0, 1){x=1-t; y=1;}
border Gamma4(t=0, 1){x=0; y=1-t;}

mesh Th = buildmesh(Gamma1(10*nn) + Gamma2(10*nn) + Gamma3(10*nn) + Gamma4(10*nn) );

real diff=0.; // la différence entre la solution à t et à t-1


// Fespace
fespace Vh(Th, P1);
Vh w;
Vh u=0, v=0;
Vh p=0;
Vh q=0;

// Definition of Matrix dtMx and dtMy
matrix dtM1x, dtM1y;

// Macro
macro BuildMat()
{   /* for memory managenemt */
    varf vM(unused, v) = int2d(Th)(v);
    varf vdx(u, v) = int2d(Th)(v*dx(u)*dt);
    varf vdy(u, v) = int2d(Th)(v*dy(u)*dt);

    real[int] Mlump = vM(0, Vh);
    real[int] one(Vh.ndof); one = 1;
    real[int] M1 = one ./ Mlump;
    matrix dM1 = M1;
    matrix Mdx = vdx(Vh, Vh);
    matrix Mdy = vdy(Vh, Vh);
    dtM1x = dM1*Mdx;
    dtM1y = dM1*Mdy;
} //

// Build matrices
BuildMat

//while (diff>1e-12)
for(int n = 0; n < 300; n++){
    // Update
    Vh uold=u, vold=v, pold=p;

    // Solve
    solve pb4u (u, w, /*init=n,*/ solver=UMFPACK, eps=epsu)
        = int2d(Th)(
              u*w/dt
            + nu*(dx(u)*dx(w) + dy(u)*dy(w))
        )
        -int2d(Th)(
                convect([uold, vold], -dt, uold)/dt*w
            - dx(p)*w
        )
        + on(Gamma1,Gamma2,Gamma4,u=0.)
        + on(Gamma3, u=1)
        ;
        //plot(u);


    solve pb4v (v, w, solver=UMFPACK, eps=epsv)
        = int2d(Th)(
              v*w/dt
            + nu*(dx(v)*dx(w) + dy(v)*dy(w))
        )
        -int2d(Th)(
                convect([uold,vold],-dt,vold)/dt*w
            - dy(p)*w
        )
        + on(Gamma1,Gamma2,Gamma3,Gamma4,v=0.)
        ;
        //plot(v);

    solve pb4p (q, w, solver=UMFPACK, eps=epsp)
        = int2d(Th)(
              dx(q)*dx(w)+dy(q)*dy(w)
        )
        - int2d(Th)(
              (dx(u)+ dy(v))*w/dt
        )
        ;
         
    

    
    epsv = -abs(epsv);
    epsu = -abs(epsu);
    epsp = -abs(epsp);

    p = pold-q;
    u[] += dtM1x*q[];
    v[] += dtM1y*q[];
    plot(p,ps="p_re1000UMPACK.eps");
    diff = int2d(Th)(u-uold) ;


}

